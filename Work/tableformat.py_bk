# tableformat.py
class TableFormatter:
    def headings(self, headers):
        '''
        Emit the table headings.
        '''
        raise NotImplementedError()

    def row(self, rowdata):
        '''
        Emit a single row of table data.
        '''
        raise NotImplementedError()

#    def create_formatter(self, fmt):
#        if fmt.lower() == "txt":
#            self.formatter = TextTableFormatter()
#        elif fmt.lower() == "csv":
#            self.formatter= CSVTableFormatter()
#        elif fmt.lower() == "html":
#            self.formatter= HTMLTableFormatter()
#        else:
#            RuntimeError(f'Unknown format {formatter}')
#        return self.formatter

 #   def print_table(self, columns, fmt):
 #       for colname in columns:
 #           print(colname, end='\t')
 #           print('---------------------------')
 #           print(getattr(self, colname))
        

class TextTableFormatter(TableFormatter):
    '''
    Emit a table in plain-text format
    '''
    def headings(self, headers):
        for h in headers:
            print(f'{h:>10s}', end=' ')
        print()
        print(('-'*10 + ' ')*len(headers))
    def row(self, rowdata):
        for d in rowdata:
           print(f'{d:>10s}', end=' ')
        print()

class CSVTableFormatter(TableFormatter):
    '''
    Output portfolio data in CSV format.
    '''
    def headings(self, headers):
        print(','.join(headers))

    def row(self, rowdata):
        print(','.join(rowdata))

class HTMLTableFormatter(TableFormatter):
    '''
    Output portfolio data in HTML format.
    '''
    def headings(self, headers):
        print('<tr><th>','</th><th>'.join(headers),'</th></tr>')

    def row(self, rowdata):
        print('<tr><td>','</td><td>'.join(rowdata),'</td></tr>')

class FormatError(Exception):
        pass#print('Unknown table format')

def create_formatter(fmt):
    if fmt.lower() == "txt":
        formatter = TextTableFormatter()
    elif fmt.lower() == "csv":
        formatter = CSVTableFormatter()
    elif fmt.lower() == "html":
        formatter = HTMLTableFormatter()
    else:
        raise FormatError('Unknown table format %s' % fmt)
#:w        f('Unknown table format %s' % fmt)
        #RuntimeError(f'Unknown format {fmt}')
    return formatter

def print_table(objects, columns, formatter):
    formatter.headings(columns)
    for obj in objects:
        rowdata = [ str(getattr(obj, name)) for name in columns ]
        formatter.row(rowdata)
