
from typedproperty import typedproperty

class Stock:
    name = typedproperty('name', str)
    shares = typedproperty('shares', int)
    price = typedproperty('price', float)
    
   # name = String('name')
    
   # shares = Integer('shares')
   # price = Float('price')
    
    #__slots__ = ('name','_shares','price', '__dict__')
    def __init__(self, name, shares, price):
    # Any value stored on `self` is instance data
        self.name = name
        self.shares = shares
        self.price = price
    
    @property
    def cost(self):
        return self.shares*self.price
    
    @property 
    def shares(self):
        return self._shares
    
    @shares.setter
    def shares(self, value):
        if not isinstance(value, int):
            raise TypeError('Expected int')
        self._shares = value
    
    def sell(self,value):
        self.shares = self.shares-value
        return self.shares

    def __repr__(self):
        return (f'Stock({self.name},{self.shares},{self.price})')

if __name__ == '__main__':
    for line in follow('Data/stocklog.csv'):
        fields = line.split(',')
        name = fields[0].strip('"')
        price = float(fields[1])
        change = float(fields[4])
        if change < 0:
            print(f'{name:>10s} {price:>10.2f} {change:>10.2f}')


class NewStock(Stock):
    def yow(self):
        print('YoLO!')
